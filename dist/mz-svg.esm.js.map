{
  "version": 3,
  "sources": ["../src/core.ts", "../src/shapes.ts"],
  "sourcesContent": ["/**\n * SVG namespace that is defined in SVG v1.0 Specification\n * and subsequently added to by SVG 1.1, SVG 1.2 and SVG 2\n */\nexport const SVG_NAMESPACE= 'http://www.w3.org/2000/svg';\nexport const XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';\n\n/**\n * Create new SVG element in browser or Node.js environment.\n * In case of Node.js, JSDom document can be provided.\n */\nexport const createSVG = (props: {\n    width: number;\n    height: number;\n    document?: Document;\n}) : SVGSVGElement => {\n\n    const {\n        width: _width,\n        height: _height,\n        document: _document,\n    } = props;\n\n    const doc = _document || window.document;\n    const $svg= doc.createElementNS(SVG_NAMESPACE, 'svg');\n\n    const width = Math.max(0, Number(_width) || 0);\n    const height = Math.max(0, Number(_height) || 0);\n\n    $svg.setAttributeNS(XMLNS_NAMESPACE, 'xmlns', SVG_NAMESPACE);\n    $svg.setAttribute('width', width.toString());\n    $svg.setAttribute('height', height.toString());\n    $svg.setAttribute('viewBox', `0 0 ${ width } ${ height }`);\n\n    return $svg;\n};\n\nexport const setAttributes = ($svgElement: SVGElement, attr: [string, string|number|undefined][]) => {\n    if(!$svgElement || !attr) return;\n\n    for(const pair of attr){\n        if(pair.length !== 2) continue;\n\n        const prop = pair[0];\n        if(prop === null || prop === undefined) continue;\n\n        const value = pair[1];\n        if(value === null || value === undefined) continue;\n\n        $svgElement.setAttribute(prop, value.toString());\n    }\n};", "import { setAttributes, SVG_NAMESPACE } from './core';\n\n/**\n * Create SVG path.\n */\nexport const createPath = (props: {\n    document?: Document;\n    d?: string;\n    stroke?: string;\n    strokeWidth?: number|string;\n    fill?: string;\n    strokeLinecap?: string; // 'round'\n    strokeLinejoin?: string;\n    vectorEffect?: string; // 'non-scaling-stroke' - used to disable line scale\n}) : SVGPathElement => {\n\n    const {\n        document: _document,\n        d: _d,\n        stroke,\n        strokeWidth,\n        fill,\n        strokeLinecap,\n        strokeLinejoin,\n        vectorEffect,\n    } = props;\n\n    const doc = _document || window.document;\n\n    const $path = doc.createElementNS(SVG_NAMESPACE, 'path');\n\n    if(_d){\n        // remove newlines and double spaces\n        const d = _d.replace(/\\s\\s+/g, ' ');\n\n        $path.setAttribute('d', d);\n    }\n\n    setAttributes($path, [\n        ['d', _d],\n        ['fill', fill],\n        ['stroke', stroke],\n        ['stroke-width', strokeWidth],\n        ['stroke-linecap', strokeLinecap],\n        ['stroke-linejoin', strokeLinejoin],\n        ['vector-effect', vectorEffect],\n    ]);\n\n    return $path;\n};\n\n/**\n * Create SVG rectangle.\n */\nexport const createRect = (props: {\n    document?: Document;\n    x?: number|string;\n    y?: number|string;\n    width?: number|string;\n    height: number|string;\n    stroke?: string;\n    strokeWidth?: number|string;\n    fill?: string;\n    rx?: number|string;\n    ry?: number|string;\n}) : SVGRectElement => {\n    const {\n        document: _document,\n        x, y, rx, ry,\n        width, height,\n        stroke, strokeWidth,\n        fill,\n    } = props;\n\n    const doc = _document || window.document;\n\n    const $rect = doc.createElementNS(SVG_NAMESPACE, 'rect');\n\n    if(x){\n        $rect.setAttribute('x', x.toString());\n    }\n\n    if(y){\n        $rect.setAttribute('y', y.toString());\n    }\n\n    if(rx){\n        $rect.setAttribute('rx', rx.toString());\n    }\n\n    if(ry){\n        $rect.setAttribute('ry', ry.toString());\n    }\n\n    if(width){\n        $rect.setAttribute('width', width.toString());\n    }\n\n    if(height){\n        $rect.setAttribute('height', height.toString());\n    }\n\n    if(stroke){\n        $rect.setAttribute('stroke', stroke);\n    }\n\n    if(strokeWidth) {\n        $rect.setAttribute('stroke-width', strokeWidth.toString());\n    }\n\n    if(fill){\n        $rect.setAttribute('fill', fill);\n    }\n\n    return $rect;\n};\n\n/**\n * Create SVG circle.\n */\nexport const createCircle = (props: {\n    document?: Document;\n    cx?: string|number;\n    cy?: string|number;\n    r?: string|number;\n    stroke?: string;\n    strokeWidth?: string|number;\n    fill?: string;\n}) : SVGCircleElement => {\n    const {\n        document: _document,\n        cx, cy, r,\n        stroke, strokeWidth, fill,\n    } = props;\n\n    const doc = _document || window.document;\n\n    const $circle = doc.createElementNS(SVG_NAMESPACE, 'circle');\n\n    if(cx){\n        $circle.setAttribute('cx', cx.toString());\n    }\n\n    if(cy){\n        $circle.setAttribute('cy', cy.toString());\n    }\n\n    if(r){\n        $circle.setAttribute('r', r.toString());\n    }\n\n    if(stroke){\n        $circle.setAttribute('stroke', stroke);\n    }\n\n    if(strokeWidth) {\n        $circle.setAttribute('stroke-width', strokeWidth.toString());\n    }\n\n    if(fill){\n        $circle.setAttribute('fill', fill);\n    }\n\n    return $circle;\n};\n\n/**\n * Create SVG ellipse.\n */\nexport const createEllipse = (props: {\n    document?: Document;\n    cx?: string|number;\n    cy?: string|number;\n    rx?: string|number;\n    ry?: string|number;\n    stroke?: string;\n    strokeWidth?: string|number;\n    fill?: string;\n}) : SVGEllipseElement => {\n    const {\n        document: _document,\n        cx, cy, rx, ry,\n        stroke, strokeWidth, fill,\n    } = props;\n\n    const doc = _document || window.document;\n\n    const $ellipse = doc.createElementNS(SVG_NAMESPACE, 'ellipse');\n\n    if(cx){\n        $ellipse.setAttribute('cx', cx.toString());\n    }\n\n    if(cy){\n        $ellipse.setAttribute('cy', cy.toString());\n    }\n\n    if(rx){\n        $ellipse.setAttribute('rx', rx.toString());\n    }\n\n    if(ry){\n        $ellipse.setAttribute('ry', ry.toString());\n    }\n\n    if(stroke){\n        $ellipse.setAttribute('stroke', stroke);\n    }\n\n    if(strokeWidth) {\n        $ellipse.setAttribute('stroke-width', strokeWidth.toString());\n    }\n\n    if(fill){\n        $ellipse.setAttribute('fill', fill);\n    }\n\n    return $ellipse;\n};\n\n/**\n * Create SVG line.\n */\nexport const createLine = (props: {\n    document?: Document;\n    x1?: string|number;\n    y1?: string|number;\n    x2?: string|number;\n    y2?: string|number;\n    stroke?: string;\n    strokeWidth?: string|number;\n    strokeLinecap?: string; // 'round'\n    strokeLinejoin?: string;\n}) : SVGLineElement => {\n    const {\n        document: _document,\n        x1, y1, x2, y2,\n        stroke, strokeWidth,\n        strokeLinecap, strokeLinejoin\n    } = props;\n\n    const doc = _document || window.document;\n\n    const $line = doc.createElementNS(SVG_NAMESPACE, 'line');\n\n    if(x1){\n        $line.setAttribute('x1', x1.toString());\n    }\n\n    if(y1){\n        $line.setAttribute('y1', y1.toString());\n    }\n\n    if(x2){\n        $line.setAttribute('x2', x2.toString());\n    }\n\n    if(y2){\n        $line.setAttribute('y2', y2.toString());\n    }\n\n    if(stroke){\n        $line.setAttribute('stroke', stroke);\n    }\n\n    if(strokeWidth) {\n        $line.setAttribute('stroke-width', strokeWidth.toString());\n    }\n\n    if(strokeLinecap){\n        $line.setAttribute('stroke-linecap', strokeLinecap);\n    }\n\n    if(strokeLinejoin){\n        $line.setAttribute('stroke-linejoin', strokeLinejoin);\n    }\n\n    return $line;\n};\n\n/**\n * Create SVG parabola.\n\nexport const createParabola = (props: {\n    document?: Document;\n}) => {\n    const {\n        document: _document,\n    } = props;\n\n    const doc = _document || window.document;\n}; */"],
  "mappings": "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",
  "names": ["SVG_NAMESPACE", "XMLNS_NAMESPACE", "createSVG", "props", "_width", "_height", "_document", "$svg", "width", "height", "setAttributes", "$svgElement", "attr", "pair", "prop", "value", "createPath", "props", "_document", "_d", "stroke", "strokeWidth", "fill", "strokeLinecap", "strokeLinejoin", "vectorEffect", "$path", "SVG_NAMESPACE", "d", "setAttributes", "createRect", "x", "y", "rx", "ry", "width", "height", "$rect", "createCircle", "cx", "cy", "r", "$circle", "createEllipse", "$ellipse", "createLine", "x1", "y1", "x2", "y2", "$line"]
}
