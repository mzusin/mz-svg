{
  "version": 3,
  "sources": ["../src/core.ts", "../src/primitive-shapes.ts", "../src/io-browser.ts"],
  "sourcesContent": ["/**\n * SVG namespace that is defined in SVG v1.0 Specification\n * and subsequently added to by SVG 1.1, SVG 1.2 and SVG 2\n */\nexport const SVG_NAMESPACE= 'http://www.w3.org/2000/svg';\nexport const XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';\n\n/**\n * Create new SVG element in browser or Node.js environment.\n * In case of Node.js, JSDom document can be provided.\n */\nexport const createSVG = (props: {\n    width: number;\n    height: number;\n    document?: Document;\n}) : SVGSVGElement => {\n\n    const {\n        width: _width,\n        height: _height,\n        document: _document,\n    } = props;\n\n    const doc = _document || window.document;\n    const $svg= doc.createElementNS(SVG_NAMESPACE, 'svg');\n\n    const width = Math.max(0, Number(_width) || 0);\n    const height = Math.max(0, Number(_height) || 0);\n\n    $svg.setAttributeNS(XMLNS_NAMESPACE, 'xmlns', SVG_NAMESPACE);\n    $svg.setAttribute('width', width.toString());\n    $svg.setAttribute('height', height.toString());\n    $svg.setAttribute('viewBox', `0 0 ${ width } ${ height }`);\n\n    return $svg;\n};\n\n/**\n * Create SVG document from string\n */\nexport const createSVGFromString = (props: {\n    document?: Document;\n    svg: string;\n}) : SVGSVGElement => {\n    const {\n        document: _document,\n        svg,\n    } = props;\n\n    const doc = _document || window.document;\n\n    const $box = doc.createElement('div');\n    $box.innerHTML = svg;\n    return $box.firstElementChild as SVGSVGElement;\n};\n\nexport const getSVGAsString = ($svg: SVGSVGElement) => {\n    return $svg.outerHTML;\n};\n\nexport const setAttributes = ($svgElement: SVGElement, attr: [string, string|number|undefined][]) => {\n    if(!$svgElement || !attr) return;\n\n    for(const pair of attr){\n        if(pair.length !== 2) continue;\n\n        const prop = pair[0];\n        if(prop === null || prop === undefined) continue;\n\n        const value = pair[1];\n        if(value === null || value === undefined) continue;\n\n        $svgElement.setAttribute(prop, value.toString());\n    }\n};", "import { setAttributes, SVG_NAMESPACE } from './core';\n\n/**\n * Create SVG path.\n */\nexport const createPath = (props: {\n    document?: Document;\n\n    id?: string;\n    classes?: string;\n    style?: string;\n\n    d?: string;\n    pathLength?: string|number;\n\n    stroke?: string;\n    strokeWidth?: number|string;\n    strokeOpacity?: number|string;\n    strokeLinecap?: string; // 'round'\n    strokeLinejoin?: string;\n    strokeDasharray?: string;\n    strokeDashoffset?: number|string;\n    strokeMiterlimit?: number|string;\n\n    fill?: string;\n    fillOpacity?: number|string;\n    fillRule?: string;\n\n    filter?: string;\n    mask?: string;\n    transform?: string;\n\n    vectorEffect?: string; // 'non-scaling-stroke' - used to disable line scale\n    shapeRendering?: string;\n\n    clipPath?: string;\n    clipRule?: string;\n\n    opacity?: string|number;\n    visibility?: string;\n\n}) : SVGPathElement => {\n\n    const {\n        document: _document,\n        d: _d,\n    } = props;\n\n    const doc = _document || window.document;\n\n    const $path = doc.createElementNS(SVG_NAMESPACE, 'path');\n\n    if(_d){\n        // remove newlines and double spaces\n        const d = _d.replace(/\\s\\s+/g, ' ');\n\n        $path.setAttribute('d', d);\n    }\n\n    setAttributes($path, [\n        ['id', props.id],\n        ['class', props.classes],\n        ['style', props.style],\n\n        ['d', _d],\n        ['pathLength', props.pathLength],\n\n        ['stroke', props.stroke],\n        ['stroke-width', props.strokeWidth],\n        ['stroke-opacity', props.strokeOpacity],\n        ['stroke-linecap', props.strokeLinecap],\n        ['stroke-linejoin', props.strokeLinejoin],\n        ['stroke-dasharray', props.strokeDasharray],\n        ['stroke-dashoffset', props.strokeDashoffset],\n        ['stroke-miterlimit', props.strokeMiterlimit],\n\n        ['fill', props.fill],\n        ['fill-opacity', props.fillOpacity],\n        ['fill-rule', props.fillRule],\n\n        ['filter', props.filter],\n        ['mask', props.mask],\n        ['transform', props.transform],\n\n        ['vector-effect', props.vectorEffect],\n        ['shape-rendering', props.shapeRendering],\n\n        ['clip-path', props.clipPath],\n        ['clip-rule', props.clipRule],\n\n        ['opacity', props.opacity],\n        ['visibility', props.visibility],\n    ]);\n\n    return $path;\n};\n\n/**\n * Create SVG rectangle.\n */\nexport const createRect = (props: {\n    document?: Document;\n    x?: number|string;\n    y?: number|string;\n    width?: number|string;\n    height?: number|string;\n    rx?: number|string;\n    ry?: number|string;\n\n    // -------------------------\n    id?: string;\n    classes?: string;\n    style?: string;\n\n    pathLength?: string|number;\n\n    stroke?: string;\n    strokeWidth?: number|string;\n    strokeOpacity?: number|string;\n    strokeLinecap?: string; // 'round'\n    strokeLinejoin?: string;\n    strokeDasharray?: string;\n    strokeDashoffset?: number|string;\n    strokeMiterlimit?: number|string;\n\n    fill?: string;\n    fillOpacity?: number|string;\n    fillRule?: string;\n\n    filter?: string;\n    mask?: string;\n    transform?: string;\n\n    vectorEffect?: string; // 'non-scaling-stroke' - used to disable line scale\n    shapeRendering?: string;\n\n    clipPath?: string;\n    clipRule?: string;\n\n    opacity?: string|number;\n    visibility?: string;\n}) : SVGRectElement => {\n    const {\n        document: _document\n    } = props;\n\n    const doc = _document || window.document;\n\n    const $rect = doc.createElementNS(SVG_NAMESPACE, 'rect');\n\n    setAttributes($rect, [\n        ['x', props.x],\n        ['y', props.y],\n        ['rx', props.rx],\n        ['ry', props.ry],\n        ['width', props.width],\n        ['height', props.height],\n\n        // ------------------\n\n        ['id', props.id],\n        ['class', props.classes],\n        ['style', props.style],\n\n        ['pathLength', props.pathLength],\n\n        ['stroke', props.stroke],\n        ['stroke-width', props.strokeWidth],\n        ['stroke-opacity', props.strokeOpacity],\n        ['stroke-linecap', props.strokeLinecap],\n        ['stroke-linejoin', props.strokeLinejoin],\n        ['stroke-dasharray', props.strokeDasharray],\n        ['stroke-dashoffset', props.strokeDashoffset],\n        ['stroke-miterlimit', props.strokeMiterlimit],\n\n        ['fill', props.fill],\n        ['fill-opacity', props.fillOpacity],\n        ['fill-rule', props.fillRule],\n\n        ['filter', props.filter],\n        ['mask', props.mask],\n        ['transform', props.transform],\n\n        ['vector-effect', props.vectorEffect],\n        ['shape-rendering', props.shapeRendering],\n\n        ['clip-path', props.clipPath],\n        ['clip-rule', props.clipRule],\n\n        ['opacity', props.opacity],\n        ['visibility', props.visibility],\n    ]);\n\n    return $rect;\n};\n\n/**\n * Create SVG circle.\n */\nexport const createCircle = (props: {\n    document?: Document;\n    cx?: string|number;\n    cy?: string|number;\n    r?: string|number;\n\n    // -------------------------\n    id?: string;\n    classes?: string;\n    style?: string;\n\n    pathLength?: string|number;\n\n    stroke?: string;\n    strokeWidth?: number|string;\n    strokeOpacity?: number|string;\n    strokeLinecap?: string; // 'round'\n    strokeLinejoin?: string;\n    strokeDasharray?: string;\n    strokeDashoffset?: number|string;\n    strokeMiterlimit?: number|string;\n\n    fill?: string;\n    fillOpacity?: number|string;\n    fillRule?: string;\n\n    filter?: string;\n    mask?: string;\n    transform?: string;\n\n    vectorEffect?: string; // 'non-scaling-stroke' - used to disable line scale\n    shapeRendering?: string;\n\n    clipPath?: string;\n    clipRule?: string;\n\n    opacity?: string|number;\n    visibility?: string;\n}) : SVGCircleElement => {\n    const {\n        document: _document,\n    } = props;\n\n    const doc = _document || window.document;\n\n    const $circle = doc.createElementNS(SVG_NAMESPACE, 'circle');\n\n    setAttributes($circle, [\n        ['cx', props.cx],\n        ['cy', props.cy],\n        ['r', props.r],\n\n        // ------------------\n\n        ['id', props.id],\n        ['class', props.classes],\n        ['style', props.style],\n\n        ['pathLength', props.pathLength],\n\n        ['stroke', props.stroke],\n        ['stroke-width', props.strokeWidth],\n        ['stroke-opacity', props.strokeOpacity],\n        ['stroke-linecap', props.strokeLinecap],\n        ['stroke-linejoin', props.strokeLinejoin],\n        ['stroke-dasharray', props.strokeDasharray],\n        ['stroke-dashoffset', props.strokeDashoffset],\n        ['stroke-miterlimit', props.strokeMiterlimit],\n\n        ['fill', props.fill],\n        ['fill-opacity', props.fillOpacity],\n        ['fill-rule', props.fillRule],\n\n        ['filter', props.filter],\n        ['mask', props.mask],\n        ['transform', props.transform],\n\n        ['vector-effect', props.vectorEffect],\n        ['shape-rendering', props.shapeRendering],\n\n        ['clip-path', props.clipPath],\n        ['clip-rule', props.clipRule],\n\n        ['opacity', props.opacity],\n        ['visibility', props.visibility],\n    ]);\n\n    return $circle;\n};\n\n/**\n * Create SVG ellipse.\n */\nexport const createEllipse = (props: {\n    document?: Document;\n    cx?: string|number;\n    cy?: string|number;\n    rx?: string|number;\n    ry?: string|number;\n\n    // -------------------------\n    id?: string;\n    classes?: string;\n    style?: string;\n\n    pathLength?: string|number;\n\n    stroke?: string;\n    strokeWidth?: number|string;\n    strokeOpacity?: number|string;\n    strokeLinecap?: string; // 'round'\n    strokeLinejoin?: string;\n    strokeDasharray?: string;\n    strokeDashoffset?: number|string;\n    strokeMiterlimit?: number|string;\n\n    fill?: string;\n    fillOpacity?: number|string;\n    fillRule?: string;\n\n    filter?: string;\n    mask?: string;\n    transform?: string;\n\n    vectorEffect?: string; // 'non-scaling-stroke' - used to disable line scale\n    shapeRendering?: string;\n\n    clipPath?: string;\n    clipRule?: string;\n\n    opacity?: string|number;\n    visibility?: string;\n}) : SVGEllipseElement => {\n    const {\n        document: _document,\n    } = props;\n\n    const doc = _document || window.document;\n\n    const $ellipse = doc.createElementNS(SVG_NAMESPACE, 'ellipse');\n\n    setAttributes($ellipse, [\n        ['cx', props.cx],\n        ['cy', props.cy],\n        ['rx', props.rx],\n        ['ry', props.ry],\n\n        // ------------------\n\n        ['id', props.id],\n        ['class', props.classes],\n        ['style', props.style],\n\n        ['pathLength', props.pathLength],\n\n        ['stroke', props.stroke],\n        ['stroke-width', props.strokeWidth],\n        ['stroke-opacity', props.strokeOpacity],\n        ['stroke-linecap', props.strokeLinecap],\n        ['stroke-linejoin', props.strokeLinejoin],\n        ['stroke-dasharray', props.strokeDasharray],\n        ['stroke-dashoffset', props.strokeDashoffset],\n        ['stroke-miterlimit', props.strokeMiterlimit],\n\n        ['fill', props.fill],\n        ['fill-opacity', props.fillOpacity],\n        ['fill-rule', props.fillRule],\n\n        ['filter', props.filter],\n        ['mask', props.mask],\n        ['transform', props.transform],\n\n        ['vector-effect', props.vectorEffect],\n        ['shape-rendering', props.shapeRendering],\n\n        ['clip-path', props.clipPath],\n        ['clip-rule', props.clipRule],\n\n        ['opacity', props.opacity],\n        ['visibility', props.visibility],\n    ]);\n\n    return $ellipse;\n};\n\n/**\n * Create SVG line.\n */\nexport const createLine = (props: {\n    document?: Document;\n    x1?: string|number;\n    y1?: string|number;\n    x2?: string|number;\n    y2?: string|number;\n\n    // -------------------------\n    id?: string;\n    classes?: string;\n    style?: string;\n\n    pathLength?: string|number;\n\n    stroke?: string;\n    strokeWidth?: number|string;\n    strokeOpacity?: number|string;\n    strokeLinecap?: string; // 'round'\n    strokeLinejoin?: string;\n    strokeDasharray?: string;\n    strokeDashoffset?: number|string;\n    strokeMiterlimit?: number|string;\n\n    fill?: string;\n    fillOpacity?: number|string;\n    fillRule?: string;\n\n    filter?: string;\n    mask?: string;\n    transform?: string;\n\n    vectorEffect?: string; // 'non-scaling-stroke' - used to disable line scale\n    shapeRendering?: string;\n\n    clipPath?: string;\n    clipRule?: string;\n\n    opacity?: string|number;\n    visibility?: string;\n}) : SVGLineElement => {\n    const {\n        document: _document,\n    } = props;\n\n    const doc = _document || window.document;\n\n    const $line = doc.createElementNS(SVG_NAMESPACE, 'line');\n\n    setAttributes($line, [\n        ['x1', props.x1],\n        ['x2', props.x2],\n        ['y1', props.y1],\n        ['y2', props.y2],\n\n        // ------------------\n\n        ['id', props.id],\n        ['class', props.classes],\n        ['style', props.style],\n\n        ['pathLength', props.pathLength],\n\n        ['stroke', props.stroke],\n        ['stroke-width', props.strokeWidth],\n        ['stroke-opacity', props.strokeOpacity],\n        ['stroke-linecap', props.strokeLinecap],\n        ['stroke-linejoin', props.strokeLinejoin],\n        ['stroke-dasharray', props.strokeDasharray],\n        ['stroke-dashoffset', props.strokeDashoffset],\n        ['stroke-miterlimit', props.strokeMiterlimit],\n\n        ['fill', props.fill],\n        ['fill-opacity', props.fillOpacity],\n        ['fill-rule', props.fillRule],\n\n        ['filter', props.filter],\n        ['mask', props.mask],\n        ['transform', props.transform],\n\n        ['vector-effect', props.vectorEffect],\n        ['shape-rendering', props.shapeRendering],\n\n        ['clip-path', props.clipPath],\n        ['clip-rule', props.clipRule],\n\n        ['opacity', props.opacity],\n        ['visibility', props.visibility],\n    ]);\n\n    return $line;\n};\n", "import { createSVGFromString, getSVGAsString } from './core';\n\nconst MISSING_SVG_ERR = 'Either an SVG element or an SVG string must be provided.';\n\nconst formatExt = (ext?: string) : string => {\n    if(!ext || !ext.trim()) return 'svg';\n\n    return ext.trim().toLowerCase();\n};\n\n/**\n * Download file in browser environment.\n */\nexport const download = (props: {\n    $svg?: SVGSVGElement,\n    svgString?: string;\n    outfileName?: string;\n    ext?: string; // svg, png, jpg, jpeg\n}) => {\n    return new Promise<{\n        isError: boolean;\n        msg?: string;\n    }>((resolve, reject) => {\n        if(!props.$svg && !props.svgString){\n            reject({\n                isError: true,\n                msg: MISSING_SVG_ERR,\n            });\n            return;\n        }\n\n        const _svgString = props.$svg ? getSVGAsString(props.$svg) : props.svgString;\n        const svgString = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>${ _svgString }`;\n\n        const formattedExt = formatExt(props.ext);\n        const formattedFileName = `${ props.outfileName || 'out'}.${ formattedExt }`;\n\n        if(formattedExt === 'svg'){\n\n            const blob = new Blob([svgString], {type : 'text/plain'});\n            const url = URL.createObjectURL(blob);\n\n            const link = document.createElement('a');\n            link.href = url;\n            link.title = '';\n            link.download = formattedFileName;\n            link.click();\n\n            URL.revokeObjectURL(url);\n            resolve({\n                isError: false,\n            });\n        }\n        else{\n            const $svg = props.$svg || createSVGFromString({\n                svg: props.svgString || '',\n            });\n\n            const $canvas = document.createElement('canvas');\n            $canvas.width = $svg.width.baseVal.value;\n            $canvas.height = $svg.height.baseVal.value;\n\n            const ctx = $canvas.getContext('2d');\n            if(!ctx){\n                reject({\n                    isError: true,\n                });\n                return;\n            }\n\n            const data = (new XMLSerializer()).serializeToString($svg);\n            const blob = new Blob([data], {type: 'image/svg+xml;charset=utf-8'});\n            const url = URL.createObjectURL(blob);\n\n            const $img = new Image();\n            $img.onload = () => {\n                ctx.clearRect(0, 0, $canvas.width, $canvas.height);\n                ctx.drawImage($img, 0, 0);\n\n                URL.revokeObjectURL(url);\n\n                $canvas.toBlob(cBlob => {\n\n                    if(!cBlob){\n                        resolve({\n                            isError: true,\n                        });\n                        return;\n                    }\n\n                    const cUrl = URL.createObjectURL(cBlob);\n                    const link = document.createElement('a');\n                    link.href = cUrl;\n                    link.title = '';\n                    link.download = formattedFileName;\n                    link.click();\n\n                    URL.revokeObjectURL(cUrl);\n\n                    resolve({\n                        isError: false,\n                    });\n                });\n            };\n\n            $img.onerror = () => {\n                resolve({\n                    isError: true,\n                });\n            };\n\n            $img.src = url;\n        }\n    });\n};"],
  "mappings": "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",
  "names": ["SVG_NAMESPACE", "XMLNS_NAMESPACE", "createSVG", "props", "_width", "_height", "_document", "$svg", "width", "height", "createSVGFromString", "svg", "$box", "getSVGAsString", "setAttributes", "$svgElement", "attr", "pair", "prop", "value", "createPath", "props", "_document", "_d", "$path", "SVG_NAMESPACE", "d", "setAttributes", "createRect", "$rect", "createCircle", "$circle", "createEllipse", "$ellipse", "createLine", "$line", "MISSING_SVG_ERR", "formatExt", "ext", "download", "props", "resolve", "reject", "svgString", "getSVGAsString", "formattedExt", "formattedFileName", "blob", "url", "link", "$svg", "createSVGFromString", "$canvas", "ctx", "data", "$img", "cBlob", "cUrl"]
}
